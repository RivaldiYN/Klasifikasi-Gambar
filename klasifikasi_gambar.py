# -*- coding: utf-8 -*-
"""Klasifikasi Gambar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DibV3FYOCLxdyooYc2584ujodBroD6K1

Nama: Rivaldi Yonathan Nainggolan (matatang)
"""

url = 'https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip'
filename = 'rockpaperscissors.zip'
!wget -q {url}
!unzip -q {filename}

!pip install split-folders

import splitfolders
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions
splitfolders.ratio('/content/rockpaperscissors/rps-cv-images', output=('/content/rockpaperscissors/rps-cv-images/split'), ratio=(0.6, 0.4))

base_dir = '/content/rockpaperscissors/rps-cv-images/split'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

train_rock_dir=os.path.join(train_dir, 'rock')
train_paper_dir=os.path.join(train_dir, 'paper')
train_scissors_dir=os.path.join(train_dir, 'scissors')

validation_rock_dir=os.path.join(validation_dir, 'rock')
validation_paper_dir=os.path.join(validation_dir, 'paper')
validation_scissors_dir=os.path.join(validation_dir, 'scissors')

train_data = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
)

test_data = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
)

train_generator=train_data.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical')
validation_generator=train_data.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical')

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator)

import matplotlib.pyplot as plt
def predict_label(uploaded):
    img = image.load_img(uploaded, target_size=(150, 150))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    predictions = model.predict(x)
    predicted_class = np.argmax(predictions, axis=1)

    label_map = {0: 'paper', 1: 'rock', 2: 'scissors'}
    predicted_label = label_map[predicted_class[0]]
    plt.figure(figsize=(3,3))
    plt.imshow(img)
    plt.axis('off')
    plt.title(predicted_label)
    plt.show()
    return predicted_label

from google.colab import files
uploaded = files.upload()
for fn in uploaded.keys():
    print(f'Prediksi gambar: {predict_label(fn)}')